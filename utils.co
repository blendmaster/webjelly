# Webjelly utility functions
# Author: Steven Ruppert
# For the Fall 2012 CSCI441 Graphics class at Colorado School of Mines

# this comment appears in the compiled source:
/* This file (utils.js) is compiled from utils.co. Please view the
original commented source there. */

"use strict"

# shorthand for applying translation to the identity
mat4.translation = (translation) ->
  mat4.translate mat4.identity!, translation

export log = -> console.log it; it

export degrees = -> it * 180 / Math.PI
export radians = -> it * Math.PI / 180

export $ = -> document.getElementById it

# flattens the 3d texture to a big 2d texture, since webGL doesn't support 3d
# textures natively
export flatten3d = (gl, pixels, width, height, depth) ->
  if width * height * depth > 2048*2048
    throw new Error "That 3d texture is too big ;_;"
  data = new Uint8Array pixels
  tex = gl.createTexture!
  gl.bindTexture gl.TEXTURE_2D, tex
  gl.texImage2D gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, data
  gl.texParameteri

# the texture from a ppm image file
export read-ppm = (gl, it) ->
  [p3, width, height, ...pixels] = it.split /\s+/
  data = new Uint8Array pixels
  tex = gl.createTexture!
  gl.bindTexture gl.TEXTURE_2D, tex

# how many vertices to generate with the donut around the circles
const
  RES    = 12vertices
  CIRCLE = Math.PI * 2
  RADS   = CIRCLE / RES

# generates a torus model
# returns an array of [[theta, phi]] pairs, in TRIANGLE order, but flattened
export make-donut = ->
  params = new Float32Array RES * RES * 2 * 3
  i = 0
  # for every point, add the two triangles in order
  for theta til CIRCLE by RADS
    for phi til CIRCLE by RADS
      #     3--1  .
      #      \ |
      #       \|
      #     . 2,4 .
      #        |\
      #        | \
      #     .  6--5
      params[i++] = theta; params[i++] = phi
      params[i++] = theta; params[i++] = phi + RADS
      params[i++] = theta + RADS; params[i++] = phi

      params[i++] = theta; params[i++] = phi + RADS
      params[i++] = theta - RADS; params[i++] = phi
      params[i++] = theta; params[i++] = phi + RADS + RADS

# convert a sphere map to a cube map, which webGL can handle natively
# returns the cube map
export sphere-to-cube = (gl, sphere) ->
  return stuff

