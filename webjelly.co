# Webjelly
# Author: Steven Ruppert
# For the Fall 2012 CSCI441 Graphics class at Colorado School of Mines

# this comment appears in the compiled source:
/* This file (webjelly.js) is compiled from webjelly.co. Please view the
original commented source there. */

"use strict"

canvas = document.getElementById \canvas
{width, height} = canvas

try
  window.gl =
    canvas.getContext \webgl or canvas.getContext \experimental-webgl

if gl!?
  alert "Sorry, it looks like your browser doesn't support WebGL, or webGL is \
    disabled!"
  throw new Error "no webgl ;_;"

window.gl = WebGLDebugUtils.makeDebugContext gl

# I don't like typing in gl all the time, so I will attach CONSTANTS to the
# global context. Don't do this at home, kids.
for k, v in gl => window[k] = v if /^[A-Z_]+$/.test k

gl
  &viewport   0 0 width, height
  &enable     DEPTH_TEST
  &enable     CULL_FACE
  &clearColor 0 0 0 1 # black
  &clear      COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT

# swap culling
$ \front
  if &checked then gl.cullFace FRONT
  &addEventListener \click !-> gl.cullFace FRONT; draw!
$ \back
  if &checked then gl.cullFace BACK
  &addEventListener \click !-> gl.cullFace BACK; draw!

var rotation, current-rot, fov, distance

!function reset-stage
  rotation := mat4.identity!
  current-rot := mat4.identity!
  fov := 15deg
  distance := 1 / Math.tan(radians(fov) / 2)

reset-stage!

$ \zoom-in  .addEventListener \click !-> --fov; draw!
$ \zoom-out .addEventListener \click !-> ++fov; draw!

# global state
var mode
model = {loaded: false}
buffers = {}
textures = {}

# donut generation
{thetas, phis} = make-donut!

for prog of <[flat gouraud environment threedee donut]>
  let el = $ prog
    if el.checked
      mode := prog
      load prog, gl

    el.addEventListener \click !->
      return if @disabled
      mode := prog
      load prog, gl

      setup-buffers!
      draw!

calculate-normals-and-flats = !->
  slice = Array::slice
  {triangles, vertices} = model

  vert-norms = new Float32Array vertices.length

  # coord, with no duplicates
  model.coords = coords = new Float32Array triangles.length * 3

  model.flat = flat = new Float32Array triangles.length * 3
  j = 0

  for i from 0 til triangles.length by 3
    a = triangles[i    ] * 3
    b = triangles[i + 1] * 3
    c = triangles[i + 2] * 3
    v0 = slice.call vertices, a, 3 + a
    v1 = slice.call vertices, b, 3 + b
    v2 = slice.call vertices, c, 3 + c

    cross = vec3.cross do
      vec3.direction v0, v1, []
      vec3.direction v0, v2, []
      []

    vert-norms[a, a + 1, a + 2] += cross
    vert-norms[b, b + 1, b + 2] += cross
    vert-norms[c, c + 1, c + 2] += cross

    coords[j    , j + 1, j + 2] = v0
    coords[j + 3, j + 4, j + 5] = v1
    coords[j + 6, j + 7, j + 8] = v2

    flat[j    , j + 1, j + 2] = cross
    flat[j + 3, j + 4, j + 5] = cross
    flat[j + 6, j + 7, j + 8] = cross
    j += 9

  # fill gouraud normals in coords order
  j = 0
  model.gouraud = gouraud = new Float32Array triangles.length * 3

  for i from 0 til triangles.length by 3
    a = triangles[i    ] * 3
    b = triangles[i + 1] * 3
    c = triangles[i + 2] * 3

    # XXX why do these normals have to be backwards (compared to flat normals)
    # to render correctly? There must be something wrong with my shader code or
    # this normal-generating code, but I can't figure it out.
    gouraud[j    , j + 1, j + 2] -= slice.call vert-norms, a, 3 + a
    gouraud[j + 3, j + 4, j + 5] -= slice.call vert-norms, b, 3 + b
    gouraud[j + 6, j + 7, j + 8] -= slice.call vert-norms, c, 3 + c
    j += 9

  # find coordinate bounds
  minx = miny = minz = Infinity
  maxx = maxy = maxz = 0
  for i from 0 til vertices.length by 3
    vertices[i    ] => minx <?= &; maxx >?= &
    vertices[i + 1] => miny <?= &; maxy >?= &
    vertices[i + 2] => minz <?= &; maxz >?= &

  # transforms to center stage
  to-center = -[(minx + maxx) / 2, (miny + maxy) / 2, (minz + maxz) / 2]
  to-stage =
    Math.max(maxx - minx, maxz - miny, maxz - minz)
    |> 2 / _
    |> [_, _, _]

  staging = mat4.identity!
  mat4.scale staging, to-stage
  mat4.translate staging, to-center
  model.staging = staging

  # transform to texture coordinates, used for 3d texture
  text-coords = mat4.identity!
  mat4.scale text-coords, [0.5 0.5 0.5] # to [0,1]
  mat4.translate text-coords, [1 1 1] # to [0-2] in each coord
  mat4.scale text-coords, to-stage
  mat4.translate text-coords, to-center
  model.text-coords = text-coords

function is-ready
     (mode is \donut and textures.donut?) \
  or (    model.loaded \
      and (   (mode is \environment and textures.environment?) \
           or (mode is \threedee    and textures.threedee?) \
           or  mode is \flat \
           or  mode is \gouraud))

# draw the model from the input file of triangles and vertices
setup-buffers = !->
  return unless is-ready!

  if mode is \donut
    gl.activeTexture gl.TEXTURE0
    gl.bindTexture gl.TEXTURE_2D, textures.donut
    uniform gl, \texture \1i 0

    buffers <<<
      theta : bind-buffer gl, \theta, thetas, 1
      phi   : bind-buffer gl, \phi  , phis  , 1
  else
    buffers <<<
      vertices: bind-buffer gl, \coord , model.coords, 3
      normals : bind-buffer do
        gl
        \normal
        model[if mode is \flat then \flat else \gouraud]
        3

    if mode is \environment
      gl.activeTexture gl.TEXTURE0
      gl.bindTexture gl.TEXTURE_2D, textures.environment
      uniform gl, \texture \1i 0
    else if mode is \threedee
      # not actually 3d :(
      gl.activeTexture gl.TEXTURE0
      gl.bindTexture gl.TEXTURE_2D, textures.threedee
      uniform gl, \texture \1i 0

      uniform gl, \TextureSpaceMatrix \Matrix4fv model.text-coords

export draw = !->
  return unless is-ready!

  gl.clear COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT

  if current-rot!? then current-rot := mat4.identity! # XXX weird bug
  rot = mat4.multiply current-rot, rotation, mat4.create!

  uniform gl, \NormalMatrix \Matrix3fv mat4.toMat3 rot

  uniform gl, \ProjectionMatrix \Matrix4fv \
    mat4.perspective fov, width / height, distance - 1, distance + 3

  model-view = mat4.identity!
  mat4.translate model-view, [0,0, -(distance + 1)]
  mat4.multiply  model-view, rot
  if mode is not \donut
    mat4.multiply  model-view, model.staging

  uniform gl, \ModelViewMatrix \Matrix4fv model-view

  if mode is \donut
    gl.bindBuffer ARRAY_BUFFER, buffers.theta
    gl.drawArrays TRIANGLES, 0, thetas.length
  else
    gl.bindBuffer ARRAY_BUFFER, buffers.vertices
    gl.drawArrays TRIANGLES, 0, model.triangles.length

initial-mode = mode

reading \donut-texture \AsBinaryString !->
  textures.donut = read-ppm gl, it

  reset-stage!

  $ \donut .disabled = false
  # switch mode
  if initial-mode is \donut then $ \donut .click!

reading \env-texture \AsBinaryString !->
  textures.environment = read-ppm gl, it

  reset-stage!

  $ \environment .disabled = false
  # switch mode
  if initial-mode is \environment then $ \environment .click!

reading \threedee-texture \AsArrayBuffer !->
  textures.threedee = flatten3d gl, it

  reset-stage!

  $ \threedee .disabled = false
  # switch mode
  if initial-mode is \threedee then $ \threedee .click!

reading \file \AsText !->
  tokens = it.split /\s+/ .map parseFloat
  [num-triangles, num-vertices] = tokens.splice 0, 2

  model.triangles = new Uint16Array  tokens.splice 0 num-triangles * 3
  model.vertices  = new Float32Array tokens.splice 0 num-vertices  * 3

  reset-stage!
  calculate-normals-and-flats!
  model.loaded = true

  $ \flat    .disabled = false
  $ \gouraud .disabled = false
  # switch mode to display actual model
  if initial-mode is not \donut then $ mode .click!

# handling mouse rotation

point-under = (x,y) ->
  {left, top} = canvas.getBoundingClientRect!

  # normalize to [-1, 1]
  x =   (x - left) * 2 / (width - 1 ) - 1
  y = -((y - top ) * 2 / (height - 1) - 1)

  det = 1 - x*x - y*y

  if det >= 0
    [x, y, Math.sqrt det]
  else
    [x / Math.sqrt(x*x + y*y), y / Math.sqrt(x*x + y*y), 0]

canvas
  &addEventListener \mousedown !({clientX: i0, clientY: j0}) ->
    return unless is-ready!
    &style.cursor = \move

    p = point-under i0, j0

    rotate = !({clientX: i, clientY: j}) ->
      q = point-under i, j
      cp = vec3.direction [0 0 0] p
      cq = vec3.direction [0 0 0] q

      angle = Math.acos vec3.dot(cp, cq) / (vec3.length(cp) * vec3.length(cq))
      axis = vec3.cross cp, cq

      current-rot := mat4.rotate do
        mat4.identity!
        angle
        axis

      do draw

    &addEventListener \mousemove rotate

    stop = let ran = false
      !->
        if not ran
          ran := true

          mat4.multiply current-rot, rotation, rotation
          current-rot := mat4.identity!

        &style.cursor = \pointer
        &removeEventListener \mousemove rotate
        &removeEventListener \mouseup stop
        &removeEventListener \mouseleave stop

    &addEventListener \mouseup stop
    &addEventListener \mouseleave stop

